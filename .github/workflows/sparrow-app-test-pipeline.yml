# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - fix/msix-build
  workflow_dispatch:

env:
  VITE_API_URL: ${{ vars.VITE_API_URL_DEV }}
  VITE_MIX_PANEL_TOKEN: ${{ vars.VITE_MIX_PANEL_TOKEN }}
  VITE_ENABLE_MIX_PANEL: ${{ vars.VITE_ENABLE_MIX_PANEL_DEV }}
  VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT }}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL_DEV }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:
  build_and_sign_msix:
    runs-on: windows-2025
    environment: production

    steps:
      # --- STAGE 1: BUILD TAURI APP (MSI ONLY) ---
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Windows 10 SDK
        run: choco install windows-sdk-10-version-2004-all -y
        shell: powershell

      # - name: Setup Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: "20.8"

      # - name: Install Rust 1.82.0
      #   run: |
      #     Invoke-WebRequest -Uri https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
      #     .\rustup-init.exe -y
      #     rustup install 1.82.0
      #     rustup default 1.82.0

      # - name: Update updater endpoint in tauri.conf.json file
      #   run: |
      #     $content = Get-Content apps/@sparrow-desktop/src-tauri/tauri.conf.json -Raw
      #     $newContent = $content -replace '"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"', '"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"'
      #     Set-Content -Path apps/@sparrow-desktop/src-tauri/tauri.conf.json -Value $newContent
      #   shell: pwsh

      # - name: Increase Yarn network timeout
      #   run: yarn config set network-timeout 600000

      # - name: Sync version across all files
      #   run: yarn sync-version

      # - name: Build Tauri App
      #   run: |
      #     yarn cache clean
      #     npm install -g pnpm
      #     yarn install
      #     yarn desktop-build
      #   env:
      #     TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      #     GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}

      # - name: Upload MSI and EXE as Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tauri-build-artifacts
      #     path: |
      #       apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/*.msi
      #       apps/@sparrow-desktop/src-tauri/target/debug/Sparrow.exe

      - name: Copy unsigned MSI and EXE from prebuilt
        run: |
          # Create target directory structure
          New-Item -ItemType Directory -Force -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi"
          
          # Copy MSI to where the pipeline expects it
          $msi = Get-ChildItem -Path "prebuilt/Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          if (-not $msi) {
            Write-Host "::error::No MSI found in prebuilt folder"
            exit 1
          }

          # Copy EXE to where the pipeline expects it
          $exe = Get-ChildItem -Path "prebuilt/Sparrow.exe" | Select-Object -First 1
          if (-not $exe) {
            Write-Host "::error::No EXE found in prebuilt folder"
            exit 1
          } 
          
          Copy-Item $msi.FullName -Destination "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/Sparrow.msi"
          Write-Host "Copied $($msi.Name) to standard location"

          Copy-Item $exe.FullName -Destination "apps/@sparrow-desktop/src-tauri/target/debug/Sparrow.exe"
          Write-Host "Copied $($exe.Name) to standard location"
        shell: powershell

      # --- STAGE 2: SIGN MSI WITH DIGICERT ---
      - name: Decode and Save DigiCert Certificate
        shell: pwsh
        run: |
          $certPath = "${{ github.workspace }}\Certificate_pkcs12.p12"
          $certBase64 = "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}"
          [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($certBase64))
          echo "SM_CLIENT_CERT_FILE=$certPath" >> $GITHUB_ENV
      
      - name: Set variables
        id: variables
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash

      # Setup Android SDK (required by DigiCert action for compatibility)
      - name: Setup Android SDK (for DigiCert action compatibility)
        run: |
          # Create minimal Android SDK structure to satisfy DigiCert action requirements
          $androidSdkPath = "C:\Android\android-sdk"
          $buildToolsPath = "$androidSdkPath\build-tools\30.0.2"
          
          Write-Host "Creating Android SDK directory structure..." -ForegroundColor Yellow
          New-Item -ItemType Directory -Path $buildToolsPath -Force
          
          # Create dummy files that the DigiCert action expects to find
          Write-Host "Creating required Android build tool files..." -ForegroundColor Yellow
          New-Item -ItemType File -Path "$buildToolsPath\apksigner.bat" -Force
          New-Item -ItemType File -Path "$buildToolsPath\zipalign.exe" -Force
          New-Item -ItemType File -Path "$buildToolsPath\aapt.exe" -Force
          New-Item -ItemType File -Path "$buildToolsPath\aapt2.exe" -Force
          
          # Set Android environment variables
          echo "ANDROID_HOME=$androidSdkPath" >> $env:GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$androidSdkPath" >> $env:GITHUB_ENV
          
          Write-Host "Android SDK structure created successfully" -ForegroundColor Green
        shell: powershell

      # Install DigiCert Signing Manager Tools
      - name: Install DigiCert Signing Manager Tools
        uses: digicert/ssm-code-signing@v1.0.0

      - name: Extract first KeyPair alias
        id: extract_alias
        shell: pwsh
        run: |
          $line  = (smctl keypair ls | Select-Object -Skip 2 | Select-Object -First 1)
          $alias = ($line -split '\s{2,}')[2]
          Write-Host "✅ Using alias: $alias"
          "KEYPAIR_ALIAS=$alias" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii
      
      - name: Sync Certificate into Windows Store
        shell: pwsh
        run: |
          Write-Host "🔄 Syncing cert for alias: $($env:KEYPAIR_ALIAS)"
          smctl windows certsync `
            --keypair-alias="$($env:KEYPAIR_ALIAS)" `
            --store=system

      # - name: Sign MSI
      #   run: |
      #     $msi = Get-ChildItem "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/*.msi" | Select-Object -First 1
      #     smctl sign --fingerprint ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} --input $msi.FullName
      #   shell: powershell

      # --- STAGE 3: CONVERT TO MSIX ---
      # - name: Inject version into MSIX template
      #   run: |
      #     # Extract only the correct version line under [package]
      #     $cargoFile = "apps/@sparrow-desktop/src-tauri/Cargo.toml"
      #     $versionLine = Select-String -Path $cargoFile -Pattern '^\s*version\s*=\s*"(.*?)"' | Select-Object -First 1
      #     $version = $versionLine.Matches.Groups[1].Value + ".0"

      #     # Update MSIX template
      #     $templatePath = ".github/workflows/msix_packaging/sparrow_template.xml"

      #     (Get-Content $templatePath -Raw) -replace "{{PACKAGE_VERSION}}", $version | 
      #       Set-Content $templatePath -Encoding UTF8

      #     (Get-Content $templatePath -Raw) -replace "{{MSIX_PACKAGE_PATH}}", "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/Sparrow.msi" | 
      #       Set-Content $templatePath -Encoding UTF8

      #     # Print version
      #     Write-Host "`n✅ MSIX version set to: $version"

      #     # Print Msix Package Path
      #     Write-Host "`n✅ MSIX package path set to: apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/Sparrow.msi"

      #   shell: powershell

      # --- STAGE 3: CONVERT TO MSIX USING MAKEAPPX ---
      - name: Prepare App Folder for MakeAppx
        run: |
          New-Item -ItemType Directory -Force -Path "app-root/Assets"
          $msiPath = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi" -Filter "Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          $extractPath = "app-root"
          Start-Process msiexec.exe -ArgumentList "/a `"$msiPath`" /qn TARGETDIR=`"$extractPath`"" -Wait -NoNewWindow

          #Copy app executable (MakeAppx requires it)
          $exeSource = Get-ChildItem -Path "apps/@sparrow-desktop/src-tauri/target/debug" -Filter "Sparrow.exe" -Recurse | Select-Object -First 1
          if ($exeSource) {
            Copy-Item $exeSource.FullName -Destination "app-root/Sparrow.exe"
          } else {
            Write-Host "::warning::Real Sparrow.exe not found. Inserting dummy executable."
            Set-Content -Path "app-root/Sparrow.exe" -Value "placeholder"
          }

           # Copy actual StoreLogo from known path
          $logo = "apps/@sparrow-desktop/src-tauri/icons/StoreLogo.png"
          Copy-Item $logo -Destination "app-root/Assets/StoreLogo.png"
          Copy-Item $logo -Destination "app-root/Assets/Square150x150Logo.png"
          Copy-Item $logo -Destination "app-root/Assets/Square44x44Logo.png"
          Copy-Item $logo -Destination "app-root/Assets/SplashScreen.png"

        shell: powershell

      - name: Generate AppxManifest.xml with version injection
        run: |
          $cargoFile = "apps/@sparrow-desktop/src-tauri/Cargo.toml"
          $versionLine = Select-String -Path $cargoFile -Pattern '^[\s]*version\s*=\s*\"(.*?)\"' | Select-Object -First 1
          $version = $versionLine.Matches.Groups[1].Value

          $manifest = @"
          <?xml version="1.0" encoding="utf-8"?>
          <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"
                  xmlns:mp="http://schemas.microsoft.com/appx/2014/phone/manifest"
                  xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
                  xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"
                  IgnorableNamespaces="uap mp rescap">
            <Identity Name="Sparrow"
                      Publisher="CN=Techdome Solutions, O=Techdome Solutions, C=IN"
                      Version="$version.0"
                      ProcessorArchitecture="x64" />
            <Properties>
              <DisplayName>Sparrow</DisplayName>
              <PublisherDisplayName>sparrowapp</PublisherDisplayName>
              <Description>Sparrow</Description>
              <Logo>Assets\StoreLogo.png</Logo>
            </Properties>
            <Dependencies>
              <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.0.0" MaxVersionTested="10.0.19041.0" />
            </Dependencies>
            <Resources>
              <Resource Language="en-us" />
            </Resources>
            <Capabilities>
              <rescap:Capability Name="runFullTrust" />
            </Capabilities>
            <Applications>
              <Application Id="SparrowApp" Executable="Sparrow.exe" EntryPoint="Windows.FullTrustApplication">
                <uap:VisualElements DisplayName="Sparrow"
                                    Description="Sparrow App"
                                    BackgroundColor="transparent"
                                    Square150x150Logo="Assets\Square150x150Logo.png"
                                    Square44x44Logo="Assets\Square44x44Logo.png">
                </uap:VisualElements>
              </Application>
            </Applications>
          </Package>
          "@

          $manifest | Set-Content -Encoding UTF8 -Path "app-root\AppxManifest.xml"
        shell: powershell

      - name: Create MSIX Package using MakeAppx
        run: |
          New-Item -ItemType Directory -Force -Path "msix-output"
          $msixPath = "msix-output/sparrow.msix"

          $makeAppx = Get-ChildItem -Path 'C:\Program Files (x86)\Windows Kits\10\bin' -Recurse -Filter MakeAppx.exe -ErrorAction SilentlyContinue |
                      Where-Object { $_.FullName -match '\\x64\\MakeAppx\.exe$' } |
                      Sort-Object LastWriteTime -Descending |
                      Select-Object -First 1

          if (-not $makeAppx) {
            Write-Host "::error::MakeAppx.exe not found. Please ensure Windows 10 SDK is available on this runner."
            exit 1
          }

          Write-Host "✅ Found MakeAppx.exe at: $($makeAppx.FullName)"
          & "$($makeAppx.FullName)" pack /d "app-root" /p $msixPath
        shell: powershell

      # --- STAGE 4: SIGN MSIX WITH DIGICERT ---
      - name: Sign MSIX
        run: |
          $msixPath = "msix-output/sparrow.msix"

          # Verify the MSIX file exists
          if (-Not (Test-Path $msixPath)) {
              Write-Host "❌ MSIX file not found at $msixPath"
              exit 1
          }

          Write-Host "🔐 Signing: $msixPath"

          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign `
            /fd sha256 `
            /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /v `
            "$msixPath"

          if ($LASTEXITCODE -ne 0) {
              Write-Host "❌ Failed to sign $msixPath"
              exit 1
          }

          Write-Host "✅ Successfully signed $msixPath"
        shell: powershell

      - name: Verify MSIX Signature
        run: |
          $msixPath = "msix-output/sparrow.msix"

          # Verify the MSIX file exists
          if (-Not (Test-Path $msixPath)) {
              Write-Host "❌ MSIX file not found at $msixPath"
              exit 1
          }

          Write-Host "🔍 Verifying signature for: $msixPath"

          # Get the Authenticode signature
          $sig = Get-AuthenticodeSignature -FilePath $msixPath

          # Check the signature status
          if ($sig.Status -eq 'Valid') {
              Write-Host "✅ Valid signature on $msixPath"
          } else {
              Write-Host "❌ Invalid signature on $msixPath: $($sig.Status)"
              exit 1
          }
        shell: powershell

      # --- STAGE 5: DEPLOY ---
      - name: Upload to S3
        run: |
          aws s3 cp msix-output/*.msix s3://sparrow-release-assests-prod/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Notify Teams
        run: |
          $msix = Get-ChildItem "msix-output/*.msix" | Select-Object -First 1
          $url = "https://sparrow-release-assests-prod.s3.amazonaws.com/$($msix.Name)"
          
          $body = @{
            text = "New MSIX build available: [$($msix.Name)]($url)"
          } | ConvertTo-Json
          
          Invoke-RestMethod -Uri "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}" -Method Post -Body $body -ContentType 'application/json'
        shell: powershell