# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - fix/snap-build

  workflow_dispatch:

env:
  VITE_API_URL: ${{ vars.VITE_API_URL_DEV }}
  VITE_MIX_PANEL_TOKEN: ${{ vars.VITE_MIX_PANEL_TOKEN }}
  VITE_ENABLE_MIX_PANEL: ${{ vars.VITE_ENABLE_MIX_PANEL_DEV }}
  VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT }}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL_DEV }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:
  release_linux:
    runs-on: ubuntu-latest
    environment: production

    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      CI: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Rust 1.82.0
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            pkg-config libssl-dev libcairo2-dev \
            libwebkit2gtk-4.1-dev build-essential \
            curl wget file libxdo-dev \
            libayatana-appindicator3-dev librsvg2-dev \
            gnupg software-properties-common tree
            
      - name: Setup Node.js 22
        run: |
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Install Yarn (Ubuntu 24.04 compatible)
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/yarn.gpg
          echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update
          sudo apt install -y yarn

      - name: Install project dependencies
        run: yarn

      - name: Sync version across all files
        run: yarn sync-version

      - name: Update updater endpoint in tauri.conf.json file
        run: |
          content=$(<apps/@sparrow-desktop/src-tauri/tauri.conf.json)
          newContent=$(echo "$content" | sed 's|"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"|"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"|g')
          echo "$newContent" > apps/@sparrow-desktop/src-tauri/tauri.conf.json
        shell: bash

      - name: Build Tauri app
        run: |
          yarn cache clean
          npm install -g pnpm
          yarn install
          yarn workspace @sparrow/desktop tauri build --bundles deb

      # --- Prepare APT Repository ---
      - name: Setup APT tools
        run: sudo apt-get install -y dpkg-dev gnupg2

      - name: Create repo structure
        run: |
          mkdir -p apt-repo/{pool/main,dists/stable/main/binary-amd64}
          cp apps/@sparrow-desktop/src-tauri/target/release/bundle/deb/*.deb apt-repo/pool/main/

      - name: Generate Packages.gz
        run: |
          cd apt-repo
          dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages
          gzip -k dists/stable/main/binary-amd64/Packages

      - name: Generate Release file
        run: |
          cd apt-repo
          apt-ftparchive release dists/stable/ > dists/stable/Release

      - name: Sign APT metadata
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail

          # 1. Import your private key
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import

          # 2. Extract the full fingerprint (from the first fpr: line)
          FPR="$(gpg --list-secret-keys --with-colons \
            | awk -F: '/^fpr:/ { print $10; exit }')"

          if [ -z "$FPR" ]; then
            echo "::error::Could not find GPG fingerprint"
            exit 1
          fi
          echo "Using GPG fingerprint: $FPR"

          # (Optional) Trust it ultimately so you don’t get trust warnings
          printf '%s:6:\n' "$FPR" | gpg --batch --import-ownertrust

          cd apt-repo

          # 3. Clear-sign the Release file into InRelease
          gpg --batch --yes \
              --pinentry-mode loopback \
              --passphrase "$GPG_PASSPHRASE" \
              --default-key "$FPR" \
              --clearsign -o dists/stable/InRelease dists/stable/Release

          # 4. Create the detached signature
          gpg --batch --yes \
              --pinentry-mode loopback \
              --passphrase "$GPG_PASSPHRASE" \
              --default-key "$FPR" \
              -abs -o dists/stable/Release.gpg dists/stable/Release

          echo "APT metadata signed successfully."

      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete --exclude "sparrow-repo-key.gpg"
        env:
          AWS_S3_BUCKET: sparrow-release-assests-prod
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-1
          SOURCE_DIR: apt-repo
          DEST_DIR: linux

      - name: Post Linux Build Link to Teams
        env:
          AWS_S3_BUCKET: sparrow-release-assests-prod
          AWS_REGION: us-west-1
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
        run: |
          # Find the latest .deb file in the local build output
          DEB_SRC_DIR="apps/@sparrow-desktop/src-tauri/target/release/bundle/deb"
          DEB_FILE=$(ls "$DEB_SRC_DIR"/*.deb | sort -V | tail -n 1)
          DEB_BASENAME=$(basename "$DEB_FILE")
          DEB_URL="https://sparrow-release-assests-prod.s3.us-west-1.amazonaws.com/linux/pool/main/$DEB_BASENAME"

          curl -H "Content-Type: application/json" -d "{
            \"type\": \"message\",
            \"attachments\": [
              {
                \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                \"content\": {
                  \"type\": \"AdaptiveCard\",
                  \"body\": [
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"🐧 New Debian Build Available\",
                      \"weight\": \"bolder\",
                      \"size\": \"large\"
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Branch: production\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Direct Download:\",
                      \"wrap\": true
                    }
                  ],
                  \"actions\": [
                    {
                      \"type\": \"Action.OpenUrl\",
                      \"title\": \"Download .deb\",
                      \"url\": \"$DEB_URL\"
                    }
                  ],
                  \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                  \"version\": \"1.2\"
                }
              }
            ]
          }" "$TEAMS_WEBHOOK_URL"   
  
  build-snap:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    env:
      SNAP_CHANNEL: ${{ vars.SNAP_RELEASE_CHANNEL || 'edge' }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install Snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Check Snapcraft Credentials
        run: |
          snapcraft whoami

      - name: Set up Sparrow APT Repo
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://sparrow-release-assests-prod.s3.us-west-1.amazonaws.com/linux/sparrow-repo-key.gpg | sudo tee /etc/apt/keyrings/sparrow.asc > /dev/null
          echo "deb [signed-by=/etc/apt/keyrings/sparrow.asc] https://sparrow-release-assests-prod.s3.us-west-1.amazonaws.com/linux stable main" | sudo tee /etc/apt/sources.list.d/sparrow.list
          sudo apt-get update

      - name: Download Latest Sparrow DEB
        run: |
          apt download sparrow
          deb_file=$(ls sparrow_*.deb | head -n 1)
          mv "$deb_file" sparrow.deb

      - name: Set Version and Generate snapcraft.yaml
        run: |
          export SPARROW_VERSION=$(dpkg-deb -f sparrow.deb Version)
          echo "Using Sparrow version: $SPARROW_VERSION"
          envsubst < snapcraft.yaml.in > snapcraft.yaml

      - name: Build Snap from DEB
        run: |
          sudo snapcraft --destructive-mode

      - name: Prepare Snapcraft credentials
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ vars.SNAPCRAFT_STORE_CREDENTIALS }}
        run: |
          # 1. Override XDG_CONFIG_HOME to a .config folder in the workspace
          export XDG_CONFIG_HOME="$PWD/.config"

          # 2. Create the snapcraft subfolder under that config
          mkdir -p "$XDG_CONFIG_HOME/snapcraft"

          # 3. Write the exported credentials JSON (your long token) to the file
          echo "$SNAPCRAFT_STORE_CREDENTIALS" > "$XDG_CONFIG_HOME/snapcraft/credentials.json"
          chmod 600 "$XDG_CONFIG_HOME/snapcraft/credentials.json"

          echo "Stored Snapcraft creds in $XDG_CONFIG_HOME/snapcraft/credentials.json"

      - name: Upload Snap to Snap Store
        env:
          SNAP_CHANNEL: ${{ vars.SNAP_RELEASE_CHANNEL || 'edge' }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ vars.SNAPCRAFT_STORE_CREDENTIALS }}
          XDG_CONFIG_HOME: "$PWD/.config"
        run: |
          SNAP_FILE=$(ls *.snap | head -n1)
          echo "Uploading $SNAP_FILE to $SNAP_CHANNEL"
          snapcraft upload "$SNAP_FILE" --release "$SNAP_CHANNEL"

      - name: Post Linux Snap Store Link to Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
          SNAP_STORE_URL: ${{ secrets.SNAP_STORE_URL }}
        run: |
          curl -H "Content-Type: application/json" -d "{
            \"type\": \"message\",
            \"attachments\": [
              {
                \"contentType\": \"application/vnd.microsoft.card.adaptive\",
                \"content\": {
                  \"type\": \"AdaptiveCard\",
                  \"body\": [
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"📦 New Linux Snap Store Build Available\",
                      \"weight\": \"bolder\",
                      \"size\": \"large\",
                      \"color\": \"good\"
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"A new Linux snap package has been uploaded to the Snap Store:\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Channel: $SNAP_CHANNEL\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"Snap Store URL:\",
                      \"wrap\": true
                    },
                    {
                      \"type\": \"TextBlock\",
                      \"text\": \"$SNAP_STORE_URL\",
                      \"color\": \"accent\",
                      \"wrap\": true
                    }
                  ],
                  \"\$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",
                  \"version\": \"1.2\",
                  \"msteams\": {
                    \"width\": \"Full\"
                  }
                }
              }
            ]
          }" "$TEAMS_WEBHOOK_URL"
        shell: bash

