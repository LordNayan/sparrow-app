# File: .github/workflows/sparrow-app-test-pipeline.yml
# This file is used to test the Sparrow App build and release process. Change this file to trigger the test pipeline for Sparrow App.
# It is triggered on push to the <branch_name> branch. Change the branch name to trigger the test pipeline.

name: Test release

on:
  push:
    # Trigger on push to the <branch_name> branch. Make sure to remove the branch name from the branches list below, once you are done testing.
    branches:
      - fix/msix-build
  workflow_dispatch:

env:
  VITE_API_URL: ${{ vars.VITE_API_URL_DEV }}
  VITE_MIX_PANEL_TOKEN: ${{ vars.VITE_MIX_PANEL_TOKEN }}
  VITE_ENABLE_MIX_PANEL: ${{ vars.VITE_ENABLE_MIX_PANEL_DEV }}
  VITE_API_TIMEOUT: ${{ vars.VITE_API_TIMEOUT }}
  VITE_SPARROW_SUPPORT_EMAIL: ${{ vars.VITE_SPARROW_SUPPORT_EMAIL }}
  VITE_AUTH_URL: ${{ vars.VITE_AUTH_URL_DEV }}
  VITE_SPARROW_GITHUB: ${{ vars.VITE_SPARROW_GITHUB }}
  VITE_SPARROW_DOWNLOAD_LINK: ${{ vars.VITE_SPARROW_DOWNLOAD_LINK }}
  VITE_RELEASE_NOTES_PAT_TOKEN: ${{ secrets.VITE_RELEASE_NOTES_PAT_TOKEN }}
  VITE_RELEASE_NOTES_API: ${{ vars.VITE_RELEASE_NOTES_API }}
  VITE_AZURE_CDN_URL: ${{ vars.VITE_AZURE_CDN_URL }}
  VITE_AZURE_INSIGHTS_CONNECTION_STRING: ${{ vars.VITE_AZURE_INSIGHTS_CONNECTION_STRING }}
  VITE_CANNY_API: ${{ vars.VITE_CANNY_API }}
  VITE_CANNY_URL: ${{ vars.VITE_CANNY_URL }}
  VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
  VITE_SPARROW_LINKEDIN: ${{ vars.VITE_SPARROW_LINKEDIN }}
  VITE_WEB_SOCKET_IO_API_URL: ${{ vars.VITE_WEB_SOCKET_IO_API_URL }}
  VITE_SPARROW_DOCS: ${{ vars.VITE_SPARROW_DOCS }}
  VITE_SPARROW_AI_WEBSOCKET: ${{ vars.VITE_SPARROW_AI_WEBSOCKET }}
  VITE_APP_ENVIRONMENT_PATH: ${{ vars.VITE_APP_ENVIRONMENT_PATH }}
  VITE_CANNY_FEEDBACK_URL: ${{ vars.VITE_CANNY_FEEDBACK_URL }}
  VITE_SPARROW_WEB_APP_URL: ${{ vars.VITE_SPARROW_WEB_APP_URL }}
  VITE_MARKETING_URL: ${{ vars.VITE_MARKETING_URL }}
  VITE_SENTRY_DSN: ${{ vars.VITE_SENTRY_DSN }}
  VITE_APP_ENVIRONMENT: ${{ vars.VITE_APP_ENVIRONMENT }}
  VITE_POSTHOG_CONNECTION_API_KEY: ${{ vars.VITE_POSTHOG_CONNECTION_API_KEY }}
  VITE_POSTHOG_API_URL: ${{ vars.VITE_POSTHOG_API_URL }}
  VITE_SPARROW_ADMIN_URL: ${{ vars.VITE_SPARROW_ADMIN_URL }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  CI: false

jobs:
  build_and_sign_msix:
    runs-on: windows-latest
    environment: production

    steps:
      # --- STAGE 1: BUILD TAURI APP (MSI ONLY) ---
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: "20.x"

      # - name: Set up .NET Core
      #   uses: actions/setup-dotnet@v1
      #   with:
      #     dotnet-version: 3.1

      # - name: Install Rust 1.82.0
      #   run: |
      #     Invoke-WebRequest -Uri https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile rustup-init.exe
      #     .\rustup-init.exe -y
      #     rustup install 1.82.0
      #     rustup default 1.82.0

      # - name: Update updater endpoint in tauri.conf.json file
      #   run: |
      #     $content = Get-Content apps/@sparrow-desktop/src-tauri/tauri.conf.json -Raw
      #     $newContent = $content -replace '"https://{{UPDATER_URL}}/updater/{{target}}/{{arch}}/{{current_version}}"', '"https://${{ secrets.UPDATER_ENDPOINT_PROD }}/updater/{{target}}/{{arch}}/{{current_version}}"'
      #     Set-Content -Path apps/@sparrow-desktop/src-tauri/tauri.conf.json -Value $newContent
      #   shell: powershell

      # - name: Increase Yarn network timeout
      #   run: yarn config set network-timeout 600000

      # - name: Sync version across all files
      #   run: yarn sync-version

      # - name: Build Tauri App
      #   run: |
      #     yarn cache clean
      #     yarn install
      #     yarn desktop-build
      #   env:
      #     TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      #     TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      # - name: Upload MSI as Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: unsigned-build
      #     path: apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/*.msi
      #     retention-days: 1  # Optional: Adjust retention as needed

      - name: Copy unsigned MSI from prebuilt
        run: |
          # Create target directory structure
          New-Item -ItemType Directory -Force -Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi"
          
          # Copy MSI to where the pipeline expects it
          $msi = Get-ChildItem -Path "prebuilt/Sparrow_*_x64_en-US.msi" | Select-Object -First 1
          if (-not $msi) {
            Write-Host "::error::No MSI found in prebuilt folder"
            exit 1
          }
          
          Copy-Item $msi.FullName -Destination "apps/@sparrow-desktop/src-tauri/target/release/bundle/msi/Sparrow.msi"
          Write-Host "Copied $($msi.Name) to standard location"
        shell: powershell

      # --- STAGE 2: SIGN MSI WITH DIGICERT ---
      - name: Set up DigiCert SM Client
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > cert.p12

          # Verify file was created
          if [ ! -f cert.p12 ]; then
            echo "❌ Certificate file not created!"
            exit 1
          fi
          
          # Set environment variables (critical for auth)
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> $GITHUB_ENV
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> $GITHUB_ENV
          echo "SM_CLIENT_CERT_FILE=$env:GITHUB_WORKSPACE\cert.p12" >> $env:GITHUB_ENV
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> $env:GITHUB_ENV
        shell: bash

      - name: Install DigiCert Client tools
        id: digicert-code-signing
        uses: digicert/ssm-code-signing@v1.0.0

      - name: Sign MSI
        run: |
          $msi = Get-ChildItem "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/*.msi" | Select-Object -First 1
          smctl sign --fingerprint ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} --input $msi.FullName
        shell: powershell

      # --- STAGE 3: CONVERT TO MSIX ---
      - name: Inject version into MSIX template
        run: |
          # Get version from Tauri (assuming it's in src-tauri/Cargo.toml)
          $version = (Select-String -Path "apps/@sparrow-desktop/src-tauri/Cargo.toml" -Pattern 'version = "(.*)"' | 
                     ForEach-Object { $_.Matches.Groups[1].Value }) + ".0"
          
          # Update template
          $templatePath = ".github/workflows/msix_packaging/sparrow_template.xml"
          (Get-Content $templatePath -Raw) -replace "{{PACKAGE_VERSION}}", $version | 
            Set-Content $templatePath -Encoding UTF8
          
          Write-Host "MSIX version set to: $version"
        shell: powershell

      - name: Install MSIX Packaging Tool
        run: winget install "MSIX Packaging Tool" --source msstore --silent
        shell: powershell

      - name: Prepare MSIX Template
        run: |
          $templatePath = ".github/workflows/msix_packaging/sparrow_template.xml"
          $content = Get-Content $templatePath -Raw
          $content -replace '\$\{\{msi_path\}\}', (Resolve-Path "apps/@sparrow-desktop/src-tauri/target/debug/bundle/msi/*.msi") | 
            Out-File $templatePath -Encoding UTF8
        shell: powershell

      - name: Convert to MSIX
        run: |
          MsixPackagingTool.exe create-package `
            --template .github/workflows/msix_packaging/sparrow_template.xml `
            --output msix-output/
        shell: powershell

      # --- STAGE 4: SIGN MSIX WITH DIGICERT ---
      - name: Sign MSIX
        run: |
          $msix = Get-ChildItem "msix-output/*.msix" | Select-Object -First 1
          smctl sign --fingerprint ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} --input $msix.FullName
        shell: powershell

      - name: Verify Signature
        run: |
          $msix = Get-ChildItem "msix-output/*.msix" | Select-Object -First 1
          $result = smctl verify --input $msix.FullName
          if (-not $result.Contains("Valid: True")) { 
            throw "MSIX signature verification failed" 
          }
        shell: powershell

      # --- STAGE 5: DEPLOY ---
      - name: Upload to S3
        run: |
          aws s3 cp msix-output/*.msix s3://sparrow-release-assests-prod/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Notify Teams
        run: |
          $msix = Get-ChildItem "msix-output/*.msix" | Select-Object -First 1
          $url = "https://sparrow-release-assests-prod.s3.amazonaws.com/$($msix.Name)"
          
          $body = @{
            text = "New MSIX build available: [$($msix.Name)]($url)"
          } | ConvertTo-Json
          
          Invoke-RestMethod -Uri "${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}" -Method Post -Body $body -ContentType 'application/json'
        shell: powershell